{"version":3,"file":"static/js/66.1da61d62.chunk.js","mappings":"+RA4GA,EA/FuB,WACrB,IAAQA,GAAoBC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,IAAjB,IAAhCH,gBACR,GAAsCC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAME,OAAjB,IAA1CC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,UAAWC,EAA1B,EAA0BA,QACpBC,GAAWC,EAAAA,EAAAA,MAEXC,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,MACd,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAsCF,EAAAA,EAAAA,UAAS,IAA/C,eAAOG,EAAP,KAAoBC,EAApB,KACA,GAA8CJ,EAAAA,EAAAA,UAAS,IAAvD,eAAOK,EAAP,KAAwBC,EAAxB,KA2BA,OAhBAC,EAAAA,EAAAA,YAAU,WACJhB,IACFO,EAAMP,MAAMA,GACZK,GAASY,EAAAA,EAAAA,QAGPhB,IACFM,EAAMW,QAAQ,iCACdb,GAASc,EAAAA,EAAAA,OACThB,EAAS,YACTE,EAAS,CAAEe,KAAMC,EAAAA,OAGnBC,EAAAA,EAAAA,GAAS3B,EAAiBQ,EAC3B,GAAE,CAACH,EAAOK,EAAUE,EAAOZ,EAAiBQ,EAAUF,KAGrD,SAAC,EAAAsB,SAAD,UACGrB,GACC,SAACsB,EAAA,EAAD,KAEA,UAAC,EAAAD,SAAD,YACE,SAACE,EAAA,EAAD,CAAUC,MAAM,qBAChB,gBAAKC,UAAU,0BAAf,UACE,iBAAKA,UAAU,oBAAf,WACE,eAAIA,UAAU,wBAAd,6BACA,kBACEA,UAAU,qBACVC,SArCe,SAACC,GAC5BA,EAAEC,iBACF,IAAMC,EAAS,IAAIC,SACnBD,EAAOE,IAAI,cAAcvB,GACzBqB,EAAOE,IAAI,cAAcrB,GACzBmB,EAAOE,IAAI,kBAAkBnB,GAC7BT,GAAS6B,EAAAA,EAAAA,IAAeC,OAAOC,YAAYL,IAC5C,EA4BW,WAIE,iBAAKJ,UAAU,iBAAf,WACE,SAAC,MAAD,KACA,kBACEP,KAAK,WACLiB,YAAY,cACZC,UAAQ,EACRC,MAAO7B,EACP8B,SAAU,SAACX,GAAD,OAAOlB,EAAekB,EAAEY,OAAOF,MAA/B,QAGd,iBAAKZ,UAAU,iBAAf,WACE,SAAC,MAAD,KACA,kBACEP,KAAK,WACLiB,YAAY,eACZC,UAAQ,EACRC,MAAO3B,EACP4B,SAAU,SAACX,GAAD,OAAOhB,EAAegB,EAAEY,OAAOF,MAA/B,QAGd,iBAAKZ,UAAU,iBAAf,WACE,SAAC,MAAD,KACA,kBACEP,KAAK,WACLiB,YAAY,mBACZC,UAAQ,EACRC,MAAOzB,EACP0B,SAAU,SAACX,GAAD,OAAOd,EAAmBc,EAAEY,OAAOF,MAAnC,QAGd,kBACEnB,KAAK,SACLmB,MAAM,SACNZ,UAAU,oBACVe,WAAUxC,gBAS3B,C,iDChGD,IARiB,SAAC,GAAa,IAAZwB,EAAW,EAAXA,MACjB,OACE,SAAC,IAAD,WACI,2BAAQA,KAGf,C,+ECRM,IAAMJ,EAAW,SAAC3B,EAAiBQ,QAChBwC,IAApBhD,GACFiD,YAAW,YACe,IAApBjD,IACFkD,QAAQC,IAAI,WAAYnD,GACxBQ,EAAS,UAEZ,GAAE,IAEN,EAEY4C,EAAY,SAACC,EAAOlD,EAAMK,EAAUI,IAEnC,IAAVyC,GACAlD,QACc6C,IAAd7C,EAAKmD,MACS,UAAdnD,EAAKmD,OAELJ,QAAQC,IAAI,aACZ3C,EAAS,UACTI,EAAMP,MAAM,mCAEf,C","sources":["components/User/Profile/UpdatePassword/UpdatePassword.js","components/layout/MetaData/MetaData.js","util/userAuth.js"],"sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\r\nimport \"./UpdatePassword.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { userAuth } from \"../../../../util/userAuth\";\r\nimport { useAlert } from \"react-alert\";\r\nimport { clearErrors, loadUser } from \"../../../../redux/actions/userAction\";\r\nimport { UPDATE_PASSWORD_RESET } from \"../../../../redux/constants/userConstant\";\r\nimport MetaData from \"../../../layout/MetaData/MetaData\";\r\nimport Loader from \"../../../layout/Loader/Loader\";\r\nimport { updatePassword } from \"../../../../redux/actions/userAction\";\r\nimport { BsFillShieldLockFill } from \"react-icons/bs\";\r\n\r\nconst UpdatePassword = () => {\r\n  const { isAuthenticated } = useSelector((state) => state.user);\r\n  const { error, isUpdated, loading } = useSelector((state) => state.profile);\r\n  const navigate = useNavigate();\r\n\r\n  const dispatch = useDispatch();\r\n  const alert = useAlert();\r\n  const [oldPassword, setOldPassword] = useState(\"\");\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n\r\n  const updatePasswordSubmit = (e) => {\r\n    e.preventDefault();\r\n    const myForm = new FormData();\r\n    myForm.set(\"oldPassword\",oldPassword)\r\n    myForm.set(\"newPassword\",newPassword)\r\n    myForm.set(\"confirmPassword\",confirmPassword)\r\n    dispatch(updatePassword(Object.fromEntries(myForm)));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      alert.error(error);\r\n      dispatch(clearErrors());\r\n    }\r\n\r\n    if (isUpdated) {\r\n      alert.success(\"Password Updated Successfully\");\r\n      dispatch(loadUser());\r\n      navigate(\"/account\");\r\n      dispatch({ type: UPDATE_PASSWORD_RESET });\r\n    }\r\n\r\n    userAuth(isAuthenticated, navigate);\r\n  }, [error, dispatch, alert, isAuthenticated, navigate, isUpdated]);\r\n\r\n  return (\r\n    <Fragment>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <Fragment>\r\n          <MetaData title=\"Update Password\" />\r\n          <div className=\"updatePasswordContainer\">\r\n            <div className=\"updatePasswordBox\">\r\n              <h2 className=\"updatePasswordHeading\">Update Profile</h2>\r\n              <form\r\n                className=\"updatePasswordForm\"\r\n                onSubmit={updatePasswordSubmit}\r\n              >\r\n                <div className=\"updatePassword\">\r\n                  <BsFillShieldLockFill />\r\n                  <input\r\n                    type=\"password\"\r\n                    placeholder=\"OldPassword\"\r\n                    required\r\n                    value={oldPassword}\r\n                    onChange={(e) => setOldPassword(e.target.value)}\r\n                  />\r\n                </div>\r\n                <div className=\"updatePassword\">\r\n                  <BsFillShieldLockFill />\r\n                  <input\r\n                    type=\"password\"\r\n                    placeholder=\"New Password\"\r\n                    required\r\n                    value={newPassword}\r\n                    onChange={(e) => setNewPassword(e.target.value)}\r\n                  />\r\n                </div>\r\n                <div className=\"updatePassword\">\r\n                  <BsFillShieldLockFill />\r\n                  <input\r\n                    type=\"password\"\r\n                    placeholder=\"Confirm Password\"\r\n                    required\r\n                    value={confirmPassword}\r\n                    onChange={(e) => setConfirmPassword(e.target.value)}\r\n                  />\r\n                </div>\r\n                <input\r\n                  type=\"submit\"\r\n                  value=\"Update\"\r\n                  className=\"updatePasswordBtn\"\r\n                  disabled={loading ? true : false}\r\n                />\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </Fragment>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default UpdatePassword;\r\n","import Helmet from \"react-helmet\";\r\n\r\nconst MetaData = ({title}) => {\r\n  return (\r\n    <Helmet>\r\n        <title>{title}</title>\r\n    </Helmet>\r\n  )\r\n}\r\n\r\nexport default MetaData","export const userAuth = (isAuthenticated, navigate) => {\r\n  if (isAuthenticated !== undefined) {\r\n    setTimeout(() => {\r\n      if (isAuthenticated === false) {\r\n        console.log(\"userAuth\", isAuthenticated);\r\n        navigate(\"/login\");\r\n      }\r\n    }, 500);\r\n  }\r\n};\r\n\r\nexport const adminAuth = (admin, user, navigate, alert) => {\r\n  if (\r\n    admin === true &&\r\n    user &&\r\n    user.role !== undefined &&\r\n    user.role !== \"admin\"\r\n  ) {\r\n    console.log(\"adminAuth\");\r\n    navigate(\"/login\");\r\n    alert.error(\"Cannot Access Admin Authorities\");\r\n  }\r\n};\r\n"],"names":["isAuthenticated","useSelector","state","user","profile","error","isUpdated","loading","navigate","useNavigate","dispatch","useDispatch","alert","useAlert","useState","oldPassword","setOldPassword","newPassword","setNewPassword","confirmPassword","setConfirmPassword","useEffect","clearErrors","success","loadUser","type","UPDATE_PASSWORD_RESET","userAuth","Fragment","Loader","MetaData","title","className","onSubmit","e","preventDefault","myForm","FormData","set","updatePassword","Object","fromEntries","placeholder","required","value","onChange","target","disabled","undefined","setTimeout","console","log","adminAuth","admin","role"],"sourceRoot":""}